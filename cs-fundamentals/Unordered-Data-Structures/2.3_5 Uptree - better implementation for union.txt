2.1.3 Uptree - better implementation for union
implement #2:
continue to use an array where the index is the key

the value of the array is:
- (-1) if we found the identity element
- the index of the parent if we have not found the identity element

uptree      : 0   1  2  3 
sets        : 0   1  2  3
uptree array: -1 -1 -1 -1

a. union 0 and 3: 
               0
               |
uptree         3   1   2  
               0   1   2  3 
uptree array:  -1 -1  -1  0 

0 is the identity element, and 3 points to 0 
1 and 2 still have their own trees, so they have -1
array[3] = 0, means that 3 need to look at index 0 to find out what the identity element is.

b. union 1 and 2:
               0   1
               |   |
uptree         3   2     
               0   1   2  3 
uptree array:  -1 -1   1  0 
now we have tree 0-3 and tree 1-2

c. union two trees:
we simply needs to point 1 to 0 since 2 is already connected to 1

               0 <- 1
               |    |
uptree         3    2  

                0   1   2  3 
uptree array:  -1   0   1  0 

now we have tree 0-3 and tree 1-2, we simply need to point 1 to 0
0 is the identity element itself, now every number has identity element 0

2.1.4 uptree running time
O(h) worst case: when tree looks like a linkedlist
idea tree: every node points to the root directly -> time for find O(1)

2.1.5 smart union and path compression
make union smart:
a. store height to the root
adding the shorter tree to the taller tree in order to keep the height of the tree as small as possible
how do we know the height?
Instead of storing -1 in the root value, we store negative height - 1

b. store size to the root
union smaller size tree to the larger size tree to make sure that the height of tree increases with as few nodes as possible 
store negative height in the root

both guarantee the height of the tree is O(lgn)

make find more efficient: path compression
every element that we pass along the path points directly to the root node
Path compression only flattens the lineage of nodes in an up-tree from an element to the root, and not all of the elements in the up-tree every time. This has amortized benefits as the data structure is optimized over the process of several union and find operations.

running time: iterated log
The number of times you can take a log of a number 

log*(n) = 
0,               n <= 1
1+log*(log(n)),  n > 1

lg*(2^65536) -> 1+lg*(65536) -> 2+lg*(16) -> 3+lg*(4) -> 4+lg*(2) -> 5+lg*(1) -> 5
so the iterated log is 5.

Which one of the following is equal to lg*(2^64)?
lg*(2^64) = 1 + lg*(64) = 1 + 1 + lg*(6) = 1+ 1 + 1 + lg*(~2.6) = 1 + 1 + 1 + 1 + lg*(1.4) = 1 + 1 + 1 + 1 + 1 + lg*(0.5) = 5

In a disjoint sets implemented with smart unions and path compression on find:
any sequence of m union and find operations result in the worse case running time of O(m*lg*(n)) when n is the number of items in the disjoint sets  -> O(1)*

